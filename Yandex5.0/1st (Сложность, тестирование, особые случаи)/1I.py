"""
Во всемирно известной фирме «Goondex», в которую устроился Илья, принято очень много работать,
в частности, для сотрудников установлена шестидневная рабочая неделя. Но, в качестве бонуса,
«Goondex» каждый год предлагает своим сотрудникам выбрать любой день недели в качестве выходного.
В свою очередь, оставшиеся шесть дней недели будут рабочими.

Илья сообразил, что с учётом государственных праздников (которые всегда являются выходными) с помощью правильного
выбора выходного дня недели можно варьировать количество рабочих дней в году. Теперь он хочет знать,
какой день недели ему следует выбрать в качестве выходного, чтобы отдыхать как можно больше дней в году, или,
наоборот, демонстрировать чудеса трудолюбия, работая по максимуму.

В первой строке входных данных находится одно целое число N (0 ≤ N ≤ 366) — количество государственных праздников.
Во второй строке содержится одно целое число year (1800 ≤ year ≤ 2100) — год, в который необходимо помочь Илье.
В каждой из последующих N строк расположено по паре чисел day month (day — целое число, month — слово,
между day и month ровно один пробел), обозначающих, что день day месяца month является государственным праздником.
В последней строке расположено слово  — день недели первого января в год year. Гарантируется, что все даты указаны
корректно (в том числе указанный день недели первого января действительно является днём недели первого января
соответствующего года year) и все дни государственных праздников различны.

Выведите через пробел два дня недели — лучший и худший варианты дней недели для выходного
(то есть дни недели, для которых достигается соответственно максимальное и минимальное количество выходных дней в году).
Если возможных вариантов ответа несколько, выведите любой из них.

|-----------------------|
|--- time limit: 1 s ---|
|- memory limit: 64 Mb--|
|-----------------------|

"""


def is_leap(y: int) -> bool:
    if y % 400 == 0 or (y % 4 == 0 and y % 100 != 0):
        return True
    else:
        return False


def code_year(y: int) -> int:
    code = {18: 2, 19: 0, 20: 6, 21: 4}
    return (code[y // 100] + y % 100 + (y % 100) // 4) % 7


def day_of_week(d: int, y: int, m: str) -> int:
    return (d + code_year(y) + months[m]) % 7


n, year = int(input()), int(input())
hols = [input() for _ in range(n)]
first_day = input()
isleap = is_leap(year)
months = {
    'January': 0 if isleap else 1,
    'February': 3 if isleap else 4,
    'March': 4,
    'April': 0,
    'May': 2,
    'June': 5,
    'July': 0,
    'August': 3,
    'September': 6,
    'October': 1,
    'November': 4,
    'December': 6
}

d_code = {0: 'Saturday', 1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday'}
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
week_days = {key: 0 for key in days}
week_days[first_day] += 1
if isleap:
    week_days[days[(days.index(first_day) + 1) % 7]] += 1

for elem in hols:
    day = d_code[day_of_week(int(elem.split()[0]), year, elem.split()[1])]
    week_days[day] -= 1

print(max(week_days, key=week_days.get), min(week_days, key=week_days.get))
